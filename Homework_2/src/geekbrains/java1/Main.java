package geekbrains.java1;

import java.lang.reflect.Array;
import java.util.Arrays;

public class Main {

    public static void main(String[] args) {

        //***************************************************************************************************************************************
        // ЗАДАЧА 1            (Работает)
        //Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1,
        //0, 0 ]. С помощью цикла и условия заменить 0 на 1, 1 на 0

        int[] ex1 = {0, 0, 0, 1, 1, 1, 0, 0, 0};
        for (int i = 0; i < ex1.length; i++) {
            if (ex1[i] == 0) {
                ex1[i] = 1;
            } else {
                ex1[i] = 0;
            }
            // System.out.println(ex1[i]); //Печатает в столбик
        }
        System.out.println("Задача 1");
        System.out.println(Arrays.toString(ex1)); //Печатает в строчку
        System.out.println();

//***************************************************************************************************************************************
        //ЗАДАЧА 2 (Работает)
        //Задать пустой целочисленный массив размером 8. С помощью цикла заполнить его
        //значениями 0 3 6 9 12 15 18 21

        int[] ex2 = new int[8];
        for (int i = 0; i < 8; i++) {
            ex2[i] = i * 3; //перед выводом номер каждого элемента умножаем на 3
            // System.out.println(ex2[i]);
        }
        System.out.println("Задача 2");
        System.out.println(Arrays.toString(ex2));
        System.out.println();
//***************************************************************************************************************************************
        //ЗАДАЧА 3 (Работает)
        //Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] пройти по нему циклом, и числа меньшие 6
        //умножить на 2
        int[] ex3 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1};
        for (int i = 0; i < ex3.length; i++) {
            if (ex3[i] < 6) {
                ex3[i] = ex3[i] * 2;
            }
            // System.out.println(ex3[i]);
        }
        System.out.println("Задача 3");
        System.out.println(Arrays.toString(ex3));
        System.out.println();
//***************************************************************************************************************************************
        //ЗАДАЧА 4 (Вместо 0 и 1 выводит идентификаторы объектов + все равно не работает! )

        //Создать квадратный двумерный целочисленный массив (количество строк и столбцов
        //одинаковое), и с помощью цикла(-ов) заполнить его диагональные элементы единицами

        System.out.println("Задача 4 - работает не так :((( ");
        int[][] ex4 = new int[5][5];
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                if (i == j) {
                    ex4[i][j] = 1;
                } else {
                    ex4[i][j] = 0;
                }
            }
            System.out.println(java.util.Arrays.toString(ex4));
        }
        System.out.println();

//***************************************************************************************************************************************
//ЗАДАЧА 5
//** Задать одномерный массив и найти в нем минимальный и максимальный элементы (без
//помощи интернета);
        System.out.println("Задача 5  - не хватило времени :(((");
        System.out.println();
//***************************************************************************************************************************************
//ЗАДАЧА 6
//** Написать метод, в который передается не пустой одномерный целочисленный массив,
//метод должен вернуть true если в массиве есть место, в котором сумма левой и правой части
//массива равны. Примеры: checkBalance([1, 1, 1, || 2, 1]) → true, checkBalance ([2, 1, 1, 2, 1]) →
//false, checkBalance ([10, || 10]) → true, граница показана символами ||, эти символы в массив не
//входят.
        System.out.println("Задача 6  - не хватило времени :(((");
        System.out.println();

//***************************************************************************************************************************************
//ЗАДАЧА 7      (пока работает не так !)

//**** Написать метод, которому на вход подается одномерный массив и число n (может быть
// положительным, или отрицательным), при этом метод должен сместить все элементы массива
// на n позиций. Вышедшие за границу элементы отбрасываются, пустые места заполнять нулями.
// Нельзя пользоваться вспомогательными массивами.

        int[] ex7 = {1, 3, 4, 2};
        int n = 2;
        for (int i = 0; i < n; i++) {
            if (i <= n) {
                ex7[i] = ex7[i + n];
            } else {
                // ex7[i] = 0;

            }
            //System.out.println(ex7[i]);
        }
        System.out.println("Задача 7  -   работает не так :(((");
        System.out.println(Arrays.toString(ex7));


//***************************************************************************
//Пример из методички  ( почему-то печатает НЕ таблицу, а каждое число на новой строке)

// int a = 1;
//    int [][] m=new int[3][4];
//       for(int i=0; i<3; i++){
//           for(int j=0; j<4; j++){
//               m[i][j]=a;
//               System.out.println(m[i][j] + " ");
//               a++;
//           }
//        System.out.println();
//           }
//***************************************************************************
        //Пример из методички
//        int [][] mm=new int[5][4];
//        for (int i = 0; i < args.length; i++) {
//            for (int j = 0; j < args.length; j++) {
//                System.out.println(mm[i][j]);
//            }
//            System.out.println();
//
//            }


        //******************************************************************************

    }
}
